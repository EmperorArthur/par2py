import pytest

from par2.packets import CreatorPacket, FileDescriptionPacket, MainPacket


def test_parse_main():
    good_main = b'PAR2\x00PKT\\\x00\x00\x00\x00\x00\x00\x00\xf2\xb1\x01Pk\xc6\xca\xc5\xf5\xda\xfc\xc4\xca\xa1\xc3\xef\xbe"\xb3bC\x176b\x07\x90\x8e\xb8\xae\xd9(\'' \
                b'PAR 2.0\x00Main\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa7\xd3\xbd3V3\x9e\xb6\x11\xc2\xb1\xd1\xde\x02\xc9q'
    packet = MainPacket.from_bytes(good_main)
    assert packet.is_valid()
    assert packet.file_count == 1
    assert packet.file_count == len(packet.file_ids) + len(packet.non_recovery_set_file_ids)
    assert len(packet.file_ids) == 1
    assert len(packet.non_recovery_set_file_ids) == 0
    assert packet.file_ids[0].hex() == "a7d3bd3356339eb611c2b1d1de02c971"


def test_parse_creator():
    good_creator = b'PAR2\x00PKTh\x00\x00\x00\x00\x00\x00\x00\x0e;\xb8\x07\xf3F\x15\xefO\xa3\x91*\xfb\xae7\xaf\xbe"\xb3bC\x176b\x07\x90\x8e\xb8\xae\xd9(\'' \
                   b'PAR 2.0\x00Creator\x00Created by par2cmdline version 0.8.1.\x00\x00\x00'
    packet = CreatorPacket.from_bytes(good_creator)
    assert packet.is_valid()
    assert packet.client == "Created by par2cmdline version 0.8.1."


def test_parse_file_description():
    good_description = b'PAR2\x00PKT\x84\x00\x00\x00\x00\x00\x00\x00?\x05E\x83$\x9d\xe3}U\xb5\xd4\x83n\x07D\xaf\xbe"\xb3bC\x176b\x07\x90\x8e\xb8\xae\xd9(\'' \
                       b'PAR 2.0\x00FileDesc\xa7\xd3\xbd3V3\x9e\xb6\x11\xc2\xb1\xd1\xde\x02\xc9q\x1aZ\x9a`\xc5]\xe5\xc6\xe7\x822h\x99c\x85p\x1aZ\x9a`\xc5]\xe5\xc6\xe7\x822h\x99c\x85pR\x00\x00\x00\x00\x00\x00\x00testfile.txt'
    packet = FileDescriptionPacket.from_bytes(good_description)
    assert packet.is_valid()
    assert packet.id.hex() == "a7d3bd3356339eb611c2b1d1de02c971"
    assert packet.hash16k.hex() == "1a5a9a60c55de5c6e782326899638570"
    assert packet.hash.hex() == "1a5a9a60c55de5c6e782326899638570"
    assert packet.name == "testfile.txt"


@pytest.mark.skip("Packet not yet implemented")
def test_parse_file_verification():
    good_verification = b'PAR2\x00PKT\xf4\x01\x00\x00\x00\x00\x00\x00\xfb\x8f\xfd5\xec\x91Nz+\xb4\x11\x8f\t\x10\xa3\x1f\xbe"\xb3bC\x176b\x07\x90\x8e\xb8\xae\xd9(\'' \
                        b'PAR 2.0\x00IFSC\x00\x00\x00\x00\xa7\xd3\xbd3V3\x9e\xb6\x11\xc2\xb1\xd1\xde\x02\xc9qwc\x1c\xa4\xf0\xe0\x84\x19\xb7\x07&\xa4G3:\xb6\x19-\xdc^\xb1\x88\xb7\x15\x96\x984J\xfd\xeb\x87\xe9\x1b\xe1\x81\xfcp\x8a\x0c\xf9AfA\xfc\x103\xbfK\x08\xa9\x81\xae\x8a\xda\xda\xea\xbf \x18\xecY\x8e\xfchz\x0b{\xc3\xedjs\x8c\x190O\xb4-\xf0c:\xf0\x1b#^\xe3V\xda\xe2\xf0-Roa[\xe9\x14\x8e\xb6\x9c@\xcf\xdf\x95/\xbd\x91\xc6X\xbf2d 0\xdeEd\x95\xbd\xce\xb3\xde\xf9\xb2\xe539\xe8\x0c$\x18\x9f\x1b\x99\xc5\x10\x11_^g\x80\x11\xef\tQ\xfd{6o\xba\x16y\tr\xf6\xbdT{e\x86\xea\x90\xbe6X\xea\x1fp\x1e\xe4\x95\xbc\x81\x01\x89\xd7\xf4\x939\x13;E\x89\xb6-\x12b@&\xbe!\x16\xc5@\xe7\x87\x8c#q\x1b[B\x88/\x8d\x98x\xae\x87\x95\xaa\x07\x85R\xf9f\xb9\xb72\xb9\x8e\xa7\xa1\xbeb\xac\xbf\xa1\xbf\x18\xcc\xe6\x9a\xbeX\xe2\x85\xdd=\xfe\xe6\xc8\xd1\x11\x80\xc9V\xe5\xb5\xaf\xc3\xd1\x97\x0c\xe2\x19>=CA\xdb\xf0\xe3\xc1\\b7}:!\x1dB\x04\x18\xd4\xa3\xa3\xd5\xc8\xc1\xfd\xce,Ty\x80P/\xc0\x08\xd92\xa3\x1f\xf0\x9f\n\xd7\x7f\xcf\x16za{\xa5\xd4\xb2\xfa}Y\xef&\xbe\xcc\xcf\xa8iv\x05\xf0\xdd\xad?\x13\xbb\xf9\xbe\xb7\xd2\x89\xeb\xb2\xf0\xfduNb{\x0f\xc5\xba\xb1a\xca\x8d0\x11\xeb\xd7\xb3so\xb8\xba\xd6\xfcN\xeb\x12%,\xda\xccB\xcd\xb2\x88\xad\x16\xa1}\xed\xcd\xd0\xf4\x0165\xa46{4\xc4]%\x91h\x83\xa9{N\x8a\xccF\xc4e\xea\xe3\x15\xff\xa6\x11\xf4\x87\x1f\x85\xa15U \xc7ysK\xe0\x92v\x17\x82\xb9\xde' \
